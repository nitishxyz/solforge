name: Build and Release Binaries

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release version (bump if needed)
        id: determine_version
        shell: bash
        run: |
          set -euo pipefail
          CURRENT_VERSION=$(jq -r .version packages/install/package.json)
          if git rev-parse "v${CURRENT_VERSION}" >/dev/null 2>&1; then
            echo "Current tag v${CURRENT_VERSION} exists; bumping patch version"
            MAJOR=$(echo "$CURRENT_VERSION" | awk -F. '{print $1}')
            MINOR=$(echo "$CURRENT_VERSION" | awk -F. '{print $2}')
            PATCH=$(echo "$CURRENT_VERSION" | awk -F. '{print $3}')
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            # Update all package.json versions
            tmpfile=$(mktemp)
            jq ".version = \"${NEW_VERSION}\"" packages/install/package.json > "$tmpfile"
            mv "$tmpfile" packages/install/package.json
            jq ".version = \"${NEW_VERSION}\"" apps/cli/package.json > "$tmpfile"
            mv "$tmpfile" apps/cli/package.json
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add packages/install/package.json apps/cli/package.json
            git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
            # Push back to the current branch
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            git push origin "$BRANCH"
            echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          else
            echo "version=${CURRENT_VERSION}" >> "$GITHUB_OUTPUT"
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
            echo "Tag v${CURRENT_VERSION} does not exist; using it for this release"
          fi

  build-binaries:
    needs: check-version
    runs-on: ${{ matrix.runner }}
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    strategy:
      matrix:
        include:
          - os: darwin
            arch: x64
            runner: macos-latest
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: linux
            arch: x64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: windows
            arch: x64
            runner: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Sync to latest branch tip
        shell: bash
        run: |
          git fetch origin
          git checkout "${{ github.ref_name }}"
          git pull --ff-only origin "${{ github.ref_name }}"

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup npm auth (optional)
        if: ${{ env.NPM_TOKEN != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Configuring .npmrc for npmjs.org with token"
          printf "//registry.npmjs.org/:_authToken=%s\n" "$NPM_TOKEN" > .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Install dependencies
        run: bun install

      - name: Build platform binary from apps/cli
        shell: bash
        run: |
          set -euo pipefail
          # Build platform-specific binary from apps/cli
          case "${{ matrix.os }}-${{ matrix.arch }}" in
            darwin-arm64)
              bun run --filter @solforge/cli build:bin:darwin-arm64
              ;;
            darwin-x64)
              bun run --filter @solforge/cli build:bin:darwin-x64
              ;;
            linux-x64)
              bun run --filter @solforge/cli build:bin:linux-x64
              ;;
            linux-arm64)
              bun run --filter @solforge/cli build:bin:linux-arm64
              ;;
            windows-x64)
              bun run --filter @solforge/cli build:bin:windows-x64
              ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: solforge-${{ matrix.os }}-${{ matrix.arch }}
          path: apps/cli/dist/solforge-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  publish-npm:
    needs: [publish]
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync to latest branch tip
        shell: bash
        run: |
          git fetch origin
          git checkout "${{ github.ref_name }}"
          git pull --ff-only origin "${{ github.ref_name }}"

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Regenerate clean lockfile
        shell: bash
        run: |
          rm -f bun.lock
          bun install

      - name: Configure npm auth
        if: ${{ env.NPM_TOKEN != '' }}
        shell: bash
        run: |
          set -euo pipefail
          printf "//registry.npmjs.org/:_authToken=%s\n" "$NPM_TOKEN" > .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Ensure CLI entry is executable
        shell: bash
        run: |
          chmod +x packages/install/start.cjs || true

      - name: Verify publish token present
        shell: bash
        run: |
          if [ -z "${NPM_TOKEN}" ]; then
            echo "NPM_TOKEN is not set; skipping npm publish" >&2
            exit 1
          fi

      - name: Publish to npm (Bun)
        working-directory: packages/install
        env:
          VERSION: ${{ needs.check-version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Publishing solforge@${VERSION} to npm..."
          bun publish --access public --tag latest

  publish:
    needs: [check-version, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Flatten artifacts
        run: |
          mkdir -p ./release
          find ./artifacts -type f -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Create and push git tag
        shell: bash
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Ensure we tag the latest branch tip (in case version bump committed)
          git fetch origin
          git checkout "${{ github.ref_name }}"
          git pull --ff-only origin "${{ github.ref_name }}"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: "SolForge v${{ needs.check-version.outputs.version }}"
          body: |
            ## SolForge v${{ needs.check-version.outputs.version }}

            Platform binaries are attached below.

            - macOS (Intel): solforge-darwin-x64
            - macOS (Apple Silicon): solforge-darwin-arm64
            - Linux (x64): solforge-linux-x64
            - Linux (ARM64): solforge-linux-arm64
            - Windows (x64): solforge-windows-x64.exe
          files: ./release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
