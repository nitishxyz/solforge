name: Build and Release Binaries

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: get_version
        run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists, skipping"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist, proceeding"
          fi

  build-binaries:
    needs: check-version
    if: needs.check-version.outputs.tag_exists == 'false'
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: darwin
            arch: x64
            runner: macos-latest
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: linux
            arch: x64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: windows
            arch: x64
            runner: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build binary
        shell: bash
        run: |
          mkdir -p dist
          TARGET="bun-${{ matrix.os }}-${{ matrix.arch }}"
          OUTFILE="dist/solforge-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}"
          bun build --compile --target="$TARGET" src/cli/main.ts --outfile "$OUTFILE"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: solforge-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/solforge-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  publish:
    needs: [check-version, build-binaries]
    if: needs.check-version.outputs.tag_exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Flatten artifacts
        run: |
          mkdir -p ./release
          find ./artifacts -type f -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Create and push git tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: "SolForge v${{ needs.check-version.outputs.version }}"
          body: |
            ## SolForge v${{ needs.check-version.outputs.version }}

            Platform binaries are attached below.

            - macOS (Intel): solforge-darwin-x64
            - macOS (Apple Silicon): solforge-darwin-arm64
            - Linux (x64): solforge-linux-x64
            - Linux (ARM64): solforge-linux-arm64
            - Windows (x64): solforge-windows-x64.exe
          files: ./release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
