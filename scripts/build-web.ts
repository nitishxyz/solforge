#!/usr/bin/env bun
/**
 * Build the web UI and copy it to the CLI package
 * Also generates a manifest of all assets for embedding
 */

import { $ } from 'bun';
import { join, relative } from 'node:path';
import { readdirSync, statSync } from 'node:fs';

const ROOT = import.meta.dir.replace('/scripts', '');
const WEB_DIR = join(ROOT, 'apps/web');
const CLI_DIR = join(ROOT, 'apps/cli');
const WEB_DIST = join(WEB_DIR, 'dist');
const CLI_WEB_DIST = join(CLI_DIR, 'src/web-dist');

console.log('üî® Building web UI...');
await $`cd ${WEB_DIR} && bun run build`;
console.log('‚úÖ Web UI built successfully');

console.log('üì¶ Copying web UI to CLI...');
await $`rm -rf ${CLI_WEB_DIST}`;
await $`cp -r ${WEB_DIST} ${CLI_WEB_DIST}`;
console.log('‚úÖ Web UI copied to CLI');

// Generate manifest of all files
console.log('üìù Generating asset manifest...');

interface Manifest {
	html: string;
	assets: {
		js: string[];
		css: string[];
		other: string[];
	};
}

function scanDirectory(dir: string, baseDir: string = dir): string[] {
	const files: string[] = [];
	const entries = readdirSync(dir);

	for (const entry of entries) {
		const fullPath = join(dir, entry);
		const stat = statSync(fullPath);

		if (stat.isDirectory()) {
			files.push(...scanDirectory(fullPath, baseDir));
		} else {
			// Get path relative to base directory
			const relativePath = relative(baseDir, fullPath);
			files.push(relativePath);
		}
	}

	return files;
}

// Scan all files in web-dist
const allFiles = scanDirectory(CLI_WEB_DIST);

const assetData = new Map<string, string>();

const manifest: Manifest = {
	html: '/index.html',
	assets: {
		js: [],
		css: [],
		other: [],
	},
};

// Categorize files
for (const file of allFiles) {
	const urlPath = `/${file}`;
	const filePath = join(CLI_WEB_DIST, file);
	const fileBuffer = await Bun.file(filePath).arrayBuffer();
	const base64 = Buffer.from(fileBuffer).toString('base64');
	assetData.set(urlPath, base64);

	if (file.endsWith('.html')) {
	} else if (file.endsWith('.js')) {
		manifest.assets.js.push(urlPath);
	} else if (file.endsWith('.css')) {
		manifest.assets.css.push(urlPath);
	} else if (!file.endsWith('.map')) {
		// Skip source maps
		manifest.assets.other.push(urlPath);
	}
}

function formatBase64Literal(base64: string): string {
	return `'${base64}'`;
}

const embeddedAssetsEntries = Array.from(assetData.entries())
	.map(([path, base64]) => `\t['${path}', ${formatBase64Literal(base64)}],`)
	.join('\n');

// Write manifest
const manifestPath = join(CLI_WEB_DIST, 'manifest.json');
await Bun.write(manifestPath, JSON.stringify(manifest, null, 2));
console.log('‚úÖ Manifest generated');
console.log('üìã Manifest contents:', manifest);

// Generate TypeScript file with asset paths
// Expose helper URLs that work both in dev (filesystem) and in the compiled bundle
console.log('üìù Generating imports file...');

function normalizePath(path: string): string {
	return path.replace(/^\//, '');
}

function formatAssetArray(files: string[]): string {
	if (files.length === 0) {
		return '[]';
	}

	const items = files
		.map((file) => `\t\tresolveAsset('${normalizePath(file)}')`)
		.join(',\n');

	return `[
${items}
\t]`;
}

const importsFile = `/**
 * Auto-generated file - DO NOT EDIT
 * Generated by scripts/build-web.ts
 * 
 * This file contains paths to all web UI assets.
 * The actual files are embedded via the glob pattern in package.json build script.
 */

const isCompiledBundle = (() => {
	const url = import.meta.url;
	return typeof url === 'string' && url.includes('/$bunfs/');
})();

const WEB_DIST_PREFIX = isCompiledBundle ? './src/web-dist/' : './web-dist/';

if (process.env.DEBUG_AGI_WEB_ASSETS) {
	console.log('[web-assets] import.meta.url:', import.meta.url);
	console.log('[web-assets] isCompiledBundle:', isCompiledBundle);
	console.log('[web-assets] webDistPrefix:', WEB_DIST_PREFIX);
}

function resolveAsset(path: string) {
	const specifier = WEB_DIST_PREFIX + path;
	try {
		const resolved = import.meta.resolveSync(specifier);
		return resolved;
	} catch {
		if (process.env.DEBUG_AGI_WEB_ASSETS) {
			console.warn('[web-assets] Falling back to specifier for', specifier);
		}
		return specifier;
	}
}

// Export asset paths (filesystem paths for dev + resolveAsset helper)
export const webAssetPaths = {
	html: resolveAsset('index.html'),
	js: ${formatAssetArray(manifest.assets.js)},
	css: ${formatAssetArray(manifest.assets.css)},
	other: ${formatAssetArray(manifest.assets.other)},
};

// Export URL paths (for mapping requests to embedded files)
export const assetPaths = ${JSON.stringify(manifest, null, 2)};

const embeddedAssetBase64 = new Map<string, string>([
${embeddedAssetsEntries}
]);

const embeddedAssetCache = new Map<string, Uint8Array>();

export function getEmbeddedAsset(path: string): Uint8Array | undefined {
	const cached = embeddedAssetCache.get(path);
	if (cached) {
		return cached;
	}

	const base64 = embeddedAssetBase64.get(path);
	if (!base64) {
		return undefined;
	}

	const buffer = Buffer.from(base64, 'base64');
	embeddedAssetCache.set(path, buffer);
	return buffer;
}
`;

const importsFilePath = join(CLI_DIR, 'src/web-assets.ts');
await Bun.write(importsFilePath, importsFile);
console.log('‚úÖ Imports file generated');

console.log('üéâ Web UI build complete!');
